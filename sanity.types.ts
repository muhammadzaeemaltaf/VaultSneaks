/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customerName?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  addressLine1?: string;
  addressLine2?: string;
  addressLine3?: string;
  postalCode?: string;
  locality?: string;
  country?: string;
  phoneNumber?: string;
  products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    color?: string;
    quantity?: number;
    _key: string;
  }>;
  totalPrice?: number;
  currency?: string;
  amountDiscount?: number;
  status?: "pending" | "paid" | "shipped" | "delivered" | "cancelled";
  paymentMethod?: "COD";
  orderDate?: string;
  estimatedDeliveryDate?: string;
};

export type Review = {
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  productId?: string;
  reviewId?: string;
  reviewerName?: string;
  rating?: number;
  reviewText?: string;
  reviewDate?: string;
  reviewPicture?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  categoryName?: string;
  price?: number;
  inventory?: number;
  colors?: Array<string>;
  status?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categoryName?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | Order | Review | Product | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Category;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/category/getAllCategories.tsx
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == "category"] | order(categoryName asc)
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categoryName?: string;
}>;

// Source: ./src/sanity/orders/getAllOrders.ts
// Variable: ORDER_QUERY
// Query: *[_type == "order" ] {     ...,                products[] {                    ...,                    product->                }}
export type ORDER_QUERYResult = Array<{
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customerName?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  addressLine1?: string;
  addressLine2?: string;
  addressLine3?: string;
  postalCode?: string;
  locality?: string;
  country?: string;
  phoneNumber?: string;
  products: Array<{
    product: {
      _id: string;
      _type: "product";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      productName?: string;
      category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      };
      price?: number;
      inventory?: number;
      colors?: Array<string>;
      status?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      description?: string;
      reviews?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "review";
      }>;
    } | null;
    color?: string;
    quantity?: number;
    _key: string;
  }> | null;
  totalPrice?: number;
  currency?: string;
  amountDiscount?: number;
  status?: "cancelled" | "delivered" | "paid" | "pending" | "shipped";
  paymentMethod?: "COD";
  orderDate?: string;
  estimatedDeliveryDate?: string;
}>;

// Source: ./src/sanity/products/getProductByCategory.ts
// Variable: PRODUCT_BY_CATEGORY_QUERY
// Query: *[                     _type == "product"                     && category->categoryName in $slugs                 ] | order(name asc)
export type PRODUCT_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  price?: number;
  inventory?: number;
  colors?: Array<string>;
  status?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
}>;

// Source: ./src/sanity/products/getProductByName.ts
// Variable: PRODUCT_BY_NAME_QUERY
// Query: *[                 _type == "product"                && productName == $name             ][0]{              ...,              "categoryName": category->categoryName,             }
export type PRODUCT_BY_NAME_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  price?: number;
  inventory?: number;
  colors?: Array<string>;
  status?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
  categoryName: string | null;
} | null;

// Source: ./src/sanity/products/getRelatedProducts.ts
// Variable: RELATED_PRODUCT_BY_CATEGORY_QUERY
// Query: *[_type == "product" && category._ref == $category && _id != $excludeProductId]
export type RELATED_PRODUCT_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  price?: number;
  inventory?: number;
  colors?: Array<string>;
  status?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
}>;

// Source: ./src/sanity/products/getWomenProducts.ts
// Variable: WOMEN_PRODUCTS_QUERY
// Query: *[_type=="product" && category->categoryName match "*Women*"] | order(name asc)
export type WOMEN_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  price?: number;
  inventory?: number;
  colors?: Array<string>;
  status?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
}>;

// Source: ./src/sanity/products/searchProducts.ts
// Variable: SEARCH_PRODUCT_NAMES_QUERY
// Query: *[_type=="product" && (productName match $searchTerm || description match $searchTerm)]{      productName,       "imageUrl": image.asset->url    } | order(productName asc)[0...6]
export type SEARCH_PRODUCT_NAMES_QUERYResult = Array<{
  productName: string | null;
  imageUrl: string | null;
}>;
// Variable: SEARCH_PRODUCT_CATEGORY_NAME_QUERY
// Query: *[_type=="category" && categoryName match $searchTerm]{      categoryName    } | order(categoryName asc)
export type SEARCH_PRODUCT_CATEGORY_NAME_QUERYResult = Array<{
  categoryName: string | null;
}>;

// Source: ./src/sanity/reviews/getProductReviews.ts
// Variable: PRODUCT_REVIEW_BY_ID
// Query: *[_type == "review" && references(^._id) && references(^._id)]
export type PRODUCT_REVIEW_BY_IDResult = Array<{
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  productId?: string;
  reviewId?: string;
  reviewerName?: string;
  rating?: number;
  reviewText?: string;
  reviewDate?: string;
  reviewPicture?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n        *[_type == \"category\"] | order(categoryName asc)\n    ": ALL_CATEGORIES_QUERYResult;
    "*[_type == \"order\" ] {\n     ...,\n                products[] {\n                    ...,\n                    product->\n                }}": ORDER_QUERYResult;
    "\n                *[\n                     _type == \"product\"\n                     && category->categoryName in $slugs\n                 ] | order(name asc)\n            ": PRODUCT_BY_CATEGORY_QUERYResult;
    "\n             *[\n                 _type == \"product\"\n                && productName == $name\n             ][0]{\n              ...,\n              \"categoryName\": category->categoryName,\n             }\n        \n        ": PRODUCT_BY_NAME_QUERYResult;
    "\n       *[_type == \"product\" && category._ref == $category && _id != $excludeProductId]\n\n  ": RELATED_PRODUCT_BY_CATEGORY_QUERYResult;
    "*[_type==\"product\" && category->categoryName match \"*Women*\"] | order(name asc)": WOMEN_PRODUCTS_QUERYResult;
    "\n    *[_type==\"product\" && (productName match $searchTerm || description match $searchTerm)]{\n      productName, \n      \"imageUrl\": image.asset->url\n    } | order(productName asc)[0...6]\n  ": SEARCH_PRODUCT_NAMES_QUERYResult;
    "\n    *[_type==\"category\" && categoryName match $searchTerm]{\n      categoryName\n    } | order(categoryName asc)\n  ": SEARCH_PRODUCT_CATEGORY_NAME_QUERYResult;
    "\n      *[_type == \"review\" && references(^._id) && references(^._id)] ": PRODUCT_REVIEW_BY_IDResult;
  }
}
